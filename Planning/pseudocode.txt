======================= Updated PseudoCode =======================

# Pseudocode for Battleship Game

=======================

# Global State Variables
state = {
    "playerBoard": [],               # 2D array representing the player's grid
    "computerBoard": [],             # 2D array representing the computer's grid
    "playerShips": [],               # Array of player ship objects { name, size, cells, isSunk }
    "computerShips": [],             # Array of computer ship objects { name, size, cells, isSunk }
    "currentTurn": "1",         # Tracks whose turn it is ("1" or "-1")
    "gameOver": False,               # Tracks if the game has ended
    "aiMemory": [],                  # Tracks AI logic for targeted hits
}

=======================

# Initialize the game
function init():
    initializeBoards()               # Sets up empty boards for both player and computer
    placePlayerShips()               # Allow the player to place their ships
    placeComputerShips()             # Randomly place computer's ships
    render()                         # Call the render function to prepare the game UI
    startGame()                      # Begin the game loop

=======================

# Helper function to initialize empty boards
function initializeBoards():
    for each board in ["playerBoard", "computerBoard"]:
        create a 10x10 2D array filled with "Empty" for board

=======================

# Helper function to render the game state
function render():
    renderBoards()                   # Draws the player and computer boards
    renderShips()                    # Displays ships on the player's board
    renderTurnIndicator()            # Displays whose turn it is
    checkGameStatus()                # Checks if the game is over

=======================

# Helper function to render boards
function renderBoards():
    loop through each cell of "playerBoard" and "computerBoard":
        display the cell's state (Empty, hit, or miss)

=======================

# Helper function to place player ships
function placePlayerShips():
    loop through each ship in ["Carrier", "Battleship", "Cruiser", "Submarine", "Destroyer"]:
        allow the player to place the ship on the "playerBoard" manually

=======================

# Helper function to place computer ships randomly
function placeComputerShips():
    loop through each ship in ["Carrier", "Battleship", "Cruiser", "Submarine", "Destroyer"]:
        randomly choose a starting point and direction until valid placement is found
        mark the ship's cells on "computerBoard"

=======================

# Main game loop
function startGame():
    while not state["gameOver"]:
        if state["currentTurn"] == "1":
            handlePlayerTurn()
        else:
            handleComputerTurn()
        render()                     # Re-render after each turn

# Handle player's turn
function handlePlayerTurn():
    wait for player to click a cell on "computerBoard"
    if clicked cell contains a computer ship:
        mark cell as "hit"
        updateShipState("computerShips", clicked cell)
    else if clicked cell has no ship:
        mark cell as "miss"
    switchTurn()

# Handle computer's turn
function handleComputerTurn():
    cell = aiLogic()                 # Get cell to attack using AI logic
    if cell contains a player ship:
        mark cell as "hit"
        updateShipState("playerShips", cell)
    else if clicked cell has no ship::
        mark cell as "miss"
    switchTurn()

# AI Logic for computer
function aiLogic():
    if state["aiMemory"] is not empty:
        target adjacent cells based on "aiMemory"
    else:
        choose a random cell on "playerBoard" that has not been targeted
    return chosen cell

# Update the state of a ship when it is hit
function updateShipState(ships, hitCell):
    find the ship containing hitCell in ships
    mark hitCell as "damaged"
    if all cells of the ship are damaged:
        mark ship as "sunk"

# Switch turns
function switchTurn():
    if state["currentTurn"] == "1":
        state["currentTurn"] = "-1"
    else:
        state["currentTurn"] = "1"

# Check if the game is over
function checkGameStatus():
    if all ships in "playerShips" are sunk:
        state["gameOver"] = True
        display message: "You lose!"
    elif all ships in "computerShips" are sunk:
        state["gameOver"] = True
        display message: "You win!"

# Helper function to render whose turn it is
function renderTurnIndicator():
    display message: "It's [currentTurn]'s turn"

# Additional Helper function to Turn selected ship
function turnShip (ship)
  change the direction of selected ship (ship), 45 Degrees to the right.

# Helper function to start the game 
#Gets called when user clicks on start game button
function startGame ()
    if (Ships to be placed === 0)
      Then allow the first player to go to hit the opponint board cells
    else 
        Display a message "Y9ou need to finish placing all ships"

# Additional utility functions
function isValidPlacement(board, ship, startCell, direction):
    check if ship fits within bounds and does not overlap other ships

function getAdjacentCells(cell):
    return list of valid adjacent cells (up, down, left, right) for the given cell